services:
  kafka1:
    image: apache/kafka:3.7.0
    hostname: kafka1
    volumes:
      - kafka1-log:/var/lib/kafka/data
    secrets:
      - kafka-truststore
      - kafka1-keystore
    networks:
      kafka-client-network:
        ipv4_address: 192.168.45.10
        aliases: [ "kafka1" ]
      kafka-inter-node-network:
        ipv4_address: 192.168.55.10
    ports:
      - "9093:9093"
    env_file:
      - ./envs/kafka1.env

  kafka-connect:
    build:
      context: .
      dockerfile: ./dockerfiles/kafka-connect.Dockerfile
    depends_on:
      - kafka1
      - kafka2
    secrets:
      - kafka-truststore
      - client1-keystore
    networks:
      - kafka-client-network
      - db-network
    ports:
      - "31002:8083"
    volumes:
      - ./connect_properties/:/opt/kafka-connect/config/
      - type: tmpfs
        target: /tmp/kafka-connect

  kafka2:
    image: apache/kafka:3.7.0
    hostname: kafka2
    volumes:
      - kafka2-log:/var/lib/kafka/data
    secrets:
      - kafka-truststore
      - kafka2-keystore
    networks:
      kafka-client-network:
        ipv4_address: 192.168.45.20
        aliases: [ "kafka2" ]
      kafka-inter-node-network:
        ipv4_address: 192.168.55.20
    ports:
      - "9094:9094"
    env_file:
      - ./envs/kafka2.env

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
    secrets:
      - kafka-truststore
      - client1-keystore
    networks:
      - kafka-client-network
    ports:
      - "31000:8080"
    volumes:
      - ./client_properties/kafka_ui.yml:/etc/kafkaui/dynamic_config.yaml
    env_file:
      - ./envs/kafka_ui.env
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9093,kafka2:9094

  initializer:
    build:
      context: .  # The root of the domainradar repo
      dockerfile: ./dockerfiles/initializer.Dockerfile
    depends_on:
      - kafka1
      - kafka2
    secrets:
      - kafka-truststore
      - client1-keystore
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/initializer.properties:/scripts/client.properties
    environment:
      - BOOTSTRAP=kafka1:9093,kafka2:9094
      - COMMAND_CONFIG_FILE=/scripts/client.properties

  # prefilter:
  #   image: domrad/prefilter
  #   depends_on:
  #     initializer:
  #       condition: service_completed_successfully

  collector-zone:
    image: domrad/java-standalone
    command: [ "--col-zone", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/zone.properties:/app/client.properties
    
  collector-dns:
    image: domrad/java-standalone
    command: [ "--col-dns", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/dns.properties:/app/client.properties

  collector-nerd:
    image: domrad/java-standalone
    command: [ "--col-nerd", "-id", "${ID_PREFIX-domrad}", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/nerd.properties:/app/client.properties

  collector-geoip:
    image: domrad/java-streams
    command: [ "--col-geoip", "-t", "${THREADS:-4}", "-id", "${ID_PREFIX-domrad}-geoip", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/geoip.properties:/app/client.properties
      - ./geoip_data/:/app/geoip/

  collector-rdap-dn:
    image: domrad/rdap-dn
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - ca-cert
      - client2-cert
      - client2-key
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/rdap_dn.toml:/app/config.toml
    
  collector-rdap-ip:
    image: domrad/rdap-ip
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - ca-cert
      - client2-cert
      - client2-key
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/rdap_ip.toml:/app/config.toml

  collector-rtt:
    image: domrad/rtt
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - ca-cert
      - client2-cert
      - client2-key
    networks:
      - kafka-client-network
      - collector-network
    volumes:
      - ./client_properties/rtt.toml:/app/config.toml

  merger-ip:
    image: domrad/java-streams
    command: [ "--ip-merger", "-t", "${THREADS:-4}", "-id", "${ID_PREFIX-domrad}-merger-ip", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/mergers.properties:/app/client.properties

  merger-all:
    image: domrad/java-streams
    command: [ "--domain-merger", "-t", "${THREADS:-4}", "-id", "${ID_PREFIX-domrad}-merger-all", "-p", "/app/client.properties", "-s", "kafka1:9093,kafka2:9094" ]
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - kafka-truststore
      - client2-keystore
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/mergers.properties:/app/client.properties

  extractor:
    image: domrad/extractor
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - ca-cert
      - client2-cert
      - client2-key
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/extractor.toml:/app/config.toml
      - ./extractor_data/:/app/data/

  classifier-unit:
    image: domrad/classifier
    depends_on:
      initializer:
        condition: service_completed_successfully
    secrets:
      - ca-cert
      - client2-cert
      - client2-key
    networks:
      - kafka-client-network
    volumes:
      - ./client_properties/classifier_unit.toml:/app/config.toml

volumes:
  kafka1-log:
  kafka2-log:

networks:
  kafka-client-network:
    driver: bridge
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: 192.168.45.0/25
  kafka-inter-node-network:
    driver: bridge
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: 192.168.55.0/24
  collector-network:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 10.0.45.0/24
        - subnet: fd10:3456:789a:1::/64

secrets:
  kafka-truststore:
    file: ./secrets/kafka.truststore.jks
  kafka1-keystore:
    file: ./secrets/secrets_kafka1/kafka1.keystore.jks
  kafka2-keystore:
    file: ./secrets/secrets_kafka2/kafka2.keystore.jks
  client1-keystore:
    file: ./secrets/secrets_client1/client1.keystore.jks
  client2-keystore:
    file: ./secrets/secrets_client2/client2.keystore.jks
  ca-cert:
    file: ./secrets/ca/ca-cert
  client2-cert:
    file: ./secrets/secrets_client2/client2-cert.pem
  client2-key:
    file: ./secrets/secrets_client2/client2-priv-key.pem
